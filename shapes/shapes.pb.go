// Code generated by protoc-gen-go.
// source: shapes.proto
// DO NOT EDIT!

/*
Package shapes is a generated protocol buffer package.

It is generated from these files:
	shapes.proto

It has these top-level messages:
	SignRequest
	KeyRequest
	KeyResponse
*/
package shapes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	"context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SignRequest struct {
	Key        []byte   `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Principals []string `protobuf:"bytes,2,rep,name=Principals" json:"Principals,omitempty"`
}

func (m *SignRequest) Reset()                    { *m = SignRequest{} }
func (m *SignRequest) String() string            { return proto.CompactTextString(m) }
func (*SignRequest) ProtoMessage()               {}
func (*SignRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SignRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SignRequest) GetPrincipals() []string {
	if m != nil {
		return m.Principals
	}
	return nil
}

type KeyRequest struct {
}

func (m *KeyRequest) Reset()                    { *m = KeyRequest{} }
func (m *KeyRequest) String() string            { return proto.CompactTextString(m) }
func (*KeyRequest) ProtoMessage()               {}
func (*KeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type KeyResponse struct {
	Certificate []byte `protobuf:"bytes,1,opt,name=Certificate,proto3" json:"Certificate,omitempty"`
}

func (m *KeyResponse) Reset()                    { *m = KeyResponse{} }
func (m *KeyResponse) String() string            { return proto.CompactTextString(m) }
func (*KeyResponse) ProtoMessage()               {}
func (*KeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *KeyResponse) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func init() {
	proto.RegisterType((*SignRequest)(nil), "shapes.SignRequest")
	proto.RegisterType((*KeyRequest)(nil), "shapes.KeyRequest")
	proto.RegisterType((*KeyResponse)(nil), "shapes.KeyResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Signer service

type SignerClient interface {
	Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*KeyResponse, error)
	PublicKey(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*KeyResponse, error)
}

type signerClient struct {
	cc *grpc.ClientConn
}

func NewSignerClient(cc *grpc.ClientConn) SignerClient {
	return &signerClient{cc}
}

func (c *signerClient) Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*KeyResponse, error) {
	out := new(KeyResponse)
	err := grpc.Invoke(ctx, "/shapes.Signer/Sign", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signerClient) PublicKey(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*KeyResponse, error) {
	out := new(KeyResponse)
	err := grpc.Invoke(ctx, "/shapes.Signer/PublicKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Signer service

type SignerServer interface {
	Sign(context.Context, *SignRequest) (*KeyResponse, error)
	PublicKey(context.Context, *KeyRequest) (*KeyResponse, error)
}

func RegisterSignerServer(s *grpc.Server, srv SignerServer) {
	s.RegisterService(&_Signer_serviceDesc, srv)
}

func _Signer_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shapes.Signer/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServer).Sign(ctx, req.(*SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signer_PublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServer).PublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shapes.Signer/PublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServer).PublicKey(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Signer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shapes.Signer",
	HandlerType: (*SignerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sign",
			Handler:    _Signer_Sign_Handler,
		},
		{
			MethodName: "PublicKey",
			Handler:    _Signer_PublicKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shapes.proto",
}

func init() { proto.RegisterFile("shapes.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0xce, 0x48, 0x2c,
	0x48, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xec, 0xb9, 0xb8,
	0x83, 0x33, 0xd3, 0xf3, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x04, 0xb8, 0x98, 0xbd,
	0x53, 0x2b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x78, 0x82, 0x40, 0x4c, 0x21, 0x39, 0x2e, 0xae, 0x80,
	0xa2, 0xcc, 0xbc, 0xe4, 0xcc, 0x82, 0xc4, 0x9c, 0x62, 0x09, 0x26, 0x05, 0x66, 0x0d, 0xce, 0x20,
	0x24, 0x11, 0x25, 0x1e, 0x2e, 0x2e, 0xef, 0xd4, 0x4a, 0xa8, 0x7e, 0x25, 0x7d, 0x2e, 0x6e, 0x30,
	0xaf, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48, 0x81, 0x8b, 0xdb, 0x39, 0xb5, 0xa8, 0x24, 0x33,
	0x2d, 0x33, 0x39, 0xb1, 0x24, 0x15, 0x6a, 0x2c, 0xb2, 0x90, 0x51, 0x09, 0x17, 0x1b, 0xc8, 0xfe,
	0xd4, 0x22, 0x21, 0x23, 0x2e, 0x16, 0x10, 0x4b, 0x48, 0x58, 0x0f, 0xea, 0x50, 0x24, 0x77, 0x49,
	0xc1, 0x05, 0x91, 0x4c, 0x57, 0x62, 0x10, 0x32, 0xe3, 0xe2, 0x0c, 0x28, 0x4d, 0xca, 0xc9, 0x4c,
	0x06, 0xb9, 0x54, 0x08, 0x45, 0x0d, 0x3e, 0x7d, 0x49, 0x6c, 0xe0, 0x40, 0x30, 0x06, 0x04, 0x00,
	0x00, 0xff, 0xff, 0xcd, 0x73, 0x75, 0xfd, 0x14, 0x01, 0x00, 0x00,
}
